usethis::use_description()
usethis::use_rstudio()
devtools::load_all()
usethis::use_description()
options(
usethis.description = list(
`Authors@R` = 'person("Lidong", "Huang", email = "ldhuangz@163.com",
role = c("aut", "cre"),
comment = c(ORCID = "YOUR-ORCID-ID"))',
License = "MIT + file LICENSE",
Language =  "es"
)
)
usethis::use_description()
use_description(fields = list(Title = "Distribution Fitting for Left Singly Censored Data",
Description="This app compares the goodness of fitting with Lognormal and Gamma distribution. It provides the AIC of maximum likelihood estimation of both distributions from package ‘fitdistrplus’ as well Shaprio-Wilk statistics and P value from package ‘EnvStats’. Besides, the app also shows the cumulative probability function (CDF) and Q-Q plot fitting. Final decision about the data follow Lognormal or Gamma depends on above computing results. Generally, smaller AIC, larger P value, and closer line to the scatter in CDF/Q-Q plot mean the more likely the data follow that distribution."))
usethis::use_package("shiny")
usethis::use_package("fitdistrplus")
usethis::use_package("EnvStats")
usethis::use_package("DT")
usethis::use_package("pkgload")
usethis::use_data(ex_dt,overwrite = TRUE)
ex_dt <- read.csv("Example data.csv",as.is=TRUE,
strip.white=TRUE, colClasses="character")
ex_dt <- read.csv("Example data.csv",as.is=TRUE,
strip.white=TRUE, colClasses="character")
usethis::use_data(ex_dt,overwrite = TRUE)
devtools::load_all()
shiny::runApp()
devtools::load_all()
shiny::runApp()
devtools::load_all()
pkgload::load_all(".")
myApp()
rsconnect::deployApp()
myApp()
# ex_dt <- read.csv("Example data.csv",as.is=TRUE,
#                   strip.white=TRUE, colClasses="character")
myApp <- function(...) {
ui <- navbarPage("Distribution fitting\n
for left censored data",
tabPanel("Instruction",
sidebarLayout(
sidebarPanel(
textOutput("instruction1"),
textOutput("instruction2"),
textOutput("instruction3"),
textOutput("instruction4"),
textOutput("instruction5"),
textOutput("instruction6")
),
mainPanel(
DTOutput("example_dt")
)
)
),
tabPanel("Upload_file",
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
actionButton("goButton", "Start Fitting!", class = "btn-success")
),
mainPanel(
tableOutput("user_dt")
)
)
),
tabPanel("Summary of Fitting",
DTOutput('tb_summary')
),
tabPanel("CDF & Q-Q plot",
plotOutput('plot_submitted')
)
)
server <- function(input, output) {
output$instruction1 <- renderText(
"> This app is designed for testing the
statistical distribution (Lognormal or gamma) of left
censored data."
)
output$instruction2 <- renderText(
"> This app only accepts csv format file."
)
output$instruction3 <- renderText(
"> The dataset should only contain two columns.The first column is numeric value in which consored
value is replaced by detection limit. The second column is
logical value (TRUE for the censored, FALSE for the detected)"
)
output$instruction4 <- renderText(
"> You can download the exmple Lognormal data (right side) as template.
In this example the detection limit is 0.828"
)
output$instruction5 <- renderText(
"> Upload you data in the 'Upload_file' menu"
)
output$instruction6 <- renderText(
"> After uploading your data, if everything is right,
click 'Start Fitting!' in 'Upload_file' menu and the fitting is showed in
'Summary of Fitting' and 'CDF & Q-Q plot'"
)
output$example_dt <- renderDT(
ex_dt,
rownames=F,
extensions = 'Buttons',
options = list(
autoWidth = F,
dom = 'Bfrtip',
buttons = c('copy', 'csv',  'pdf')
)
)
storedData <- reactiveValues()
output$user_dt <- renderTable(
{infile <- input$file1
ext <- tools::file_ext(infile$datapath)
req(infile)
if (is.null(infile))
return(NULL)
validate(need(ext == "csv", "Please upload a csv file!!"))
storedData$data1 <-read.csv(infile$datapath, header = TRUE)
})
s_table <- function()
{
data1 <- storedData$data1
data1 <- data.frame(data1)
data1[is.na(data1)] <- ""
data1[!apply(data1 == "", 1, all), ]# remove empty row
data1 <-
data1[,colSums(is.na(data1)) != nrow(data1)]
data1 <-
data1[,!apply(data1 == "", 2, all)]
data1 <- data1[,1:2]
names(data1) <- c("Simul.data","Censored")
data_aic <- data.frame(left=rep(NA,nrow(data1)))
data_aic$left <- ifelse(data1$Censored,NA,data1$Simul.data)
data_aic$right <- data1$Simul.data
lnorm_fit <- fitdistcens(data_aic,"lnorm")
gamma_fit <- fitdistcens(data_aic,"gamma")
fit_aic <- c(lnorm_fit$aic,gamma_fit$aic)
distr_fit_compare <- distChooseCensored(data1$Simul.data,
data1$Censored, method = "sw",
choices = c("lnormAlt", "gammaAlt"))
ln_gamma <- distr_fit_compare$test.results
ln <- c(ln_gamma$lnormAlt$statistic,ln_gamma$lnormAlt$p.value)
gamma <- c(ln_gamma$gammaAlt$statistic,ln_gamma$gammaAlt$p.value)
final_summ <- data.frame(Statistics=
c("AIC","Statistics","P_value"),
Lognormal=c(fit_aic[1],ln[1],gamma[1]),
Gamma=c(fit_aic[2],ln[2],gamma[2]))
final_summ[,2:3] <- round(final_summ[,2:3],3)
fig_4plot <- function(){
par(mfrow=c(2,2))
cdfCompareCensored(data1$Simul.data,
data1$Censored,
distribution = "lnorm",
main="ECDF(dotted) vs Lognormal(blue)",
xlab="Order statistics")
cdfCompareCensored(data1$Simul.data,
data1$Censored,
distribution = "gamma",
main="ECDF(dotted) vs Gamma(red)",
xlab="Order statistics",
x.col = "red")
qqPlotCensored(data1$Simul.data,
data1$Censored,
main="Q-Q Plot & Lognormal fit",
distribution = "lnorm",estimate.params=TRUE,
add.line = TRUE,
xlab="Lognormal Quantiles",
ylab="Quantiles of data")
qqPlotCensored(data1$Simul.data,
data1$Censored,
main="Q-Q Plot & Gamma fit",
distribution = "gamma",estimate.params=TRUE,
add.line = TRUE,
equal.axes=FALSE,
xlab="Gamma Quantiles",
ylab="Quantiles of data")
}
r_result <- list(ss_table=final_summ,
ss_plot=fig_4plot)
return(r_result)
}
observeEvent(input$goButton, {
output$tb_summary <- renderDT(
s_table()$ss_table
)
})
observeEvent(input$goButton, {
output$plot_submitted <- renderPlot({
s_table()$ss_plot()
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
devtools::load_all(".")
a <- devtools::load_all(".")
View(a)
a[["data"]]
a[["env"]]
pkgload::load_all(".")
Censored.DF()
load("H:/paper/DL_half/Distribution_test_App/Censored.DF/data/ex_dt.rda")
View(ex_dt)
devtools::load_all(".")
Censored.DF()
usethis::use_rstudio()
usethis::use_rstudio()
pkgload::load_all(".")
myApp()
usethis::use_rstudio()
pkgload::load_all(".")
myApp()
usethis::use_package("shiny")
usethis::use_package("fitdistrplus")
usethis::use_package("EnvStats")
usethis::use_package("DT")
usethis::use_package("pkgload")
usethis::use_data(ex_dt,overwrite = TRUE)
ex_dt <- read.csv("Example data.csv",as.is=TRUE,
strip.white=TRUE, colClasses="character")
usethis::use_data(ex_dt,overwrite = TRUE)
devtools::load_all(".")
myApp()
# ex_dt <- read.csv("Example data.csv",as.is=TRUE,
#                   strip.white=TRUE, colClasses="character")
library(shiny)
library(DT)
library(fitdistrplus)
library(EnvStats)
myApp <- function(...) {
ui <- navbarPage("Distribution fitting\n
for left censored data",
tabPanel("Instruction",
sidebarLayout(
sidebarPanel(
textOutput("instruction1"),
textOutput("instruction2"),
textOutput("instruction3"),
textOutput("instruction4"),
textOutput("instruction5"),
textOutput("instruction6")
),
mainPanel(
DTOutput("example_dt")
)
)
),
tabPanel("Upload_file",
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File", accept = ".csv"),
actionButton("goButton", "Start Fitting!", class = "btn-success")
),
mainPanel(
tableOutput("user_dt")
)
)
),
tabPanel("Summary of Fitting",
DTOutput('tb_summary')
),
tabPanel("CDF & Q-Q plot",
plotOutput('plot_submitted')
)
)
server <- function(input, output) {
output$instruction1 <- renderText(
"> This app is designed for testing the
statistical distribution (Lognormal or gamma) of left
censored data."
)
output$instruction2 <- renderText(
"> This app only accepts csv format file."
)
output$instruction3 <- renderText(
"> The dataset should only contain two columns.The first column is numeric value in which consored
value is replaced by detection limit. The second column is
logical value (TRUE for the censored, FALSE for the detected)"
)
output$instruction4 <- renderText(
"> You can download the exmple Lognormal data (right side) as template.
In this example the detection limit is 0.828"
)
output$instruction5 <- renderText(
"> Upload you data in the 'Upload_file' menu"
)
output$instruction6 <- renderText(
"> After uploading your data, if everything is right,
click 'Start Fitting!' in 'Upload_file' menu and the fitting is showed in
'Summary of Fitting' and 'CDF & Q-Q plot'"
)
output$example_dt <- renderDT(
ex_dt,
rownames=F,
extensions = 'Buttons',
options = list(
autoWidth = F,
dom = 'Bfrtip',
buttons = c('copy', 'csv',  'pdf')
)
)
storedData <- reactiveValues()
output$user_dt <- renderTable(
{infile <- input$file1
ext <- tools::file_ext(infile$datapath)
req(infile)
if (is.null(infile))
return(NULL)
validate(need(ext == "csv", "Please upload a csv file!!"))
storedData$data1 <-read.csv(infile$datapath, header = TRUE)
})
s_table <- function()
{
data1 <- storedData$data1
data1 <- data.frame(data1)
data1[is.na(data1)] <- ""
data1[!apply(data1 == "", 1, all), ]# remove empty row
data1 <-
data1[,colSums(is.na(data1)) != nrow(data1)]
data1 <-
data1[,!apply(data1 == "", 2, all)]
data1 <- data1[,1:2]
names(data1) <- c("Simul.data","Censored")
data_aic <- data.frame(left=rep(NA,nrow(data1)))
data_aic$left <- ifelse(data1$Censored,NA,data1$Simul.data)
data_aic$right <- data1$Simul.data
lnorm_fit <- fitdistcens(data_aic,"lnorm")
gamma_fit <- fitdistcens(data_aic,"gamma")
fit_aic <- c(lnorm_fit$aic,gamma_fit$aic)
distr_fit_compare <- distChooseCensored(data1$Simul.data,
data1$Censored, method = "sw",
choices = c("lnormAlt", "gammaAlt"))
ln_gamma <- distr_fit_compare$test.results
ln <- c(ln_gamma$lnormAlt$statistic,ln_gamma$lnormAlt$p.value)
gamma <- c(ln_gamma$gammaAlt$statistic,ln_gamma$gammaAlt$p.value)
final_summ <- data.frame(Statistics=
c("AIC","Statistics","P_value"),
Lognormal=c(fit_aic[1],ln[1],gamma[1]),
Gamma=c(fit_aic[2],ln[2],gamma[2]))
final_summ[,2:3] <- round(final_summ[,2:3],3)
fig_4plot <- function(){
par(mfrow=c(2,2))
cdfCompareCensored(data1$Simul.data,
data1$Censored,
distribution = "lnorm",
main="ECDF(dotted) vs Lognormal(blue)",
xlab="Order statistics")
cdfCompareCensored(data1$Simul.data,
data1$Censored,
distribution = "gamma",
main="ECDF(dotted) vs Gamma(red)",
xlab="Order statistics",
x.col = "red")
qqPlotCensored(data1$Simul.data,
data1$Censored,
main="Q-Q Plot & Lognormal fit",
distribution = "lnorm",estimate.params=TRUE,
add.line = TRUE,
xlab="Lognormal Quantiles",
ylab="Quantiles of data")
qqPlotCensored(data1$Simul.data,
data1$Censored,
main="Q-Q Plot & Gamma fit",
distribution = "gamma",estimate.params=TRUE,
add.line = TRUE,
equal.axes=FALSE,
xlab="Gamma Quantiles",
ylab="Quantiles of data")
}
r_result <- list(ss_table=final_summ,
ss_plot=fig_4plot)
return(r_result)
}
observeEvent(input$goButton, {
output$tb_summary <- renderDT(
s_table()$ss_table
)
})
observeEvent(input$goButton, {
output$plot_submitted <- renderPlot({
s_table()$ss_plot()
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
devtools::load_all(".")
devtools::load_all(".")
myApp()
rsconnect::deployApp()
myApp()
Sys.setlocale("LC_ALL", "C")
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
devtools::load_all(".")
myApp()
usethis::edit_r_profile()
devtools::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
use_package("shiny")
usethis::use_package("fitdistrplus")
usethis::use_package("EnvStats")
usethis::use_package("DT")
usethis::use_package("pkgload")
pkgload::load_all(".")
myApp()
x <- pkgload::load_all(".")
View(x)
setwd("H:/paper/DL.half/Distribution.App/Censored.DF")
pkgload::load_all(".")
myApp()
usethis::use_description()
options(
usethis.description = list(
`Authors@R` = 'person("Lidong", "Huang", email = "ldhuangz@163.com",
role = c("aut", "cre"),
comment = c(ORCID = "YOUR-ORCID-ID"))',
License = "MIT + file LICENSE",
Language =  "es"
)
)
use_description(fields = list(Title = "Distribution Fitting for Left Singly Censored Data",
Description="This app compares the goodness of fitting with Lognormal and Gamma distribution. It provides the AIC of maximum likelihood estimation of both distributions from package ‘fitdistrplus’ as well Shaprio-Wilk statistics and P value from package ‘EnvStats’. Besides, the app also shows the cumulative probability function (CDF) and Q-Q plot fitting. Final decision about the data follow Lognormal or Gamma depends on above computing results. Generally, smaller AIC, larger P value, and closer line to the scatter in CDF/Q-Q plot mean the more likely the data follow that distribution."))
usethis::use_package("shiny")
usethis::use_package("fitdistrplus")
usethis::use_package("EnvStats")
usethis::use_package("DT")
usethis::use_package("pkgload")
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
ex_dt <- read.csv("Example data.csv",as.is=TRUE,
strip.white=TRUE, colClasses="character")
usethis::use_data(ex_dt,overwrite = TRUE)
pkgload::load_all(".")
myApp()
rsconnect::deployApp()
pkgload::load_all(".")
myApp()
rsconnect::deployApp()
source("H:/paper/DL.half/Distribution.App/Censored.DF/app.R", echo=TRUE)
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
usethis::use_package("spsComps")
pkgload::load_all(".")
myApp()
pkgload::load_all(".")
myApp()
library(usethis)
use_github()
